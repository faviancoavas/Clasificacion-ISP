import React, { useState, useEffect, useMemo } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, onAuthStateChanged, signInWithCustomToken } from 'firebase/auth';
import { getFirestore, collection, doc, addDoc, onSnapshot, updateDoc, deleteDoc, serverTimestamp, setDoc } from 'firebase/firestore';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, BarChart, Bar } from 'recharts';
import { ChevronRight, PlusCircle, AlertTriangle, CheckCircle, Shield, ChevronsRight, Edit, Trash2, ArrowLeft, Save, XCircle, Building, Calendar, User, FileText, List, Eye, LayoutDashboard, Download, Settings } from 'lucide-react';

// --- CONFIGURACIÓN DE FIREBASE ---
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';

// Inicializar Firebase
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);

// --- RUTA DE DATOS COLABORATIVA ---
// Ruta pública para que todos los usuarios de la app colaboren.
const INCIDENTS_COLLECTION_PATH = `/artifacts/${appId}/public/data/incidents`;
const SETTINGS_DOC_PATH = `/artifacts/${appId}/public/data/settings/main`;

// --- COMPONENTES DE LA UI ---

const Spinner = () => (
    <div className="flex justify-center items-center h-full p-10">
        <div className="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-blue-500"></div>
    </div>
);

const Modal = ({ children, onClose }) => (
    <div className="fixed inset-0 bg-black bg-opacity-60 z-50 flex justify-center items-center p-4">
        <div className="bg-white rounded-2xl shadow-2xl w-full max-w-lg max-h-[90vh] overflow-y-auto p-6 relative animate-fade-in-up">
            <button onClick={onClose} className="absolute top-4 right-4 text-gray-400 hover:text-gray-600 transition-colors">
                <XCircle size={24} />
            </button>
            {children}
        </div>
    </div>
);

// --- COMPONENTE PRINCIPAL: App ---

const App = () => {
    const [user, setUser] = useState(null);
    const [incidents, setIncidents] = useState([]);
    const [settings, setSettings] = useState({ totalHoursWorked: 200000 });
    const [loading, setLoading] = useState(true);
    const [currentView, setCurrentView] = useState('list'); // 'list', 'form', 'detail', 'dashboard'
    const [selectedIncident, setSelectedIncident] = useState(null);
    const [error, setError] = useState('');

    useEffect(() => {
        const unsubscribeAuth = onAuthStateChanged(auth, async (currentUser) => {
            if (currentUser) {
                setUser(currentUser);
            } else {
                try {
                    if (initialAuthToken) {
                        await signInWithCustomToken(auth, initialAuthToken);
                    } else {
                        await signInAnonymously(auth);
                    }
                } catch (authError) {
                    console.error("Error de autenticación:", authError);
                    setError("No se pudo autenticar. La aplicación no funcionará correctamente.");
                }
            }
        });
        return () => unsubscribeAuth();
    }, []);

    useEffect(() => {
        if (user) {
            const incidentsCollection = collection(db, INCIDENTS_COLLECTION_PATH);
            const unsubscribeIncidents = onSnapshot(incidentsCollection, (snapshot) => {
                const incidentsData = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                incidentsData.sort((a, b) => (b.incidentDate?.toDate() ?? 0) - (a.incidentDate?.toDate() ?? 0));
                setIncidents(incidentsData);
                if(loading) setLoading(false);
            }, (firestoreError) => {
                console.error("Error al cargar incidentes:", firestoreError);
                setError("No se pudieron cargar los datos de incidentes.");
                setLoading(false);
            });

            const settingsDoc = doc(db, SETTINGS_DOC_PATH);
            const unsubscribeSettings = onSnapshot(settingsDoc, (doc) => {
                if (doc.exists()) {
                    setSettings(doc.data());
                }
            }, (firestoreError) => {
                console.error("Error al cargar configuración:", firestoreError);
                setError("No se pudo cargar la configuración.");
            });

            return () => {
                unsubscribeIncidents();
                unsubscribeSettings();
            };
        }
    }, [user, loading]);

    const handleSaveIncident = async (incidentData) => {
        try {
            if (incidentData.id) {
                const incidentRef = doc(db, INCIDENTS_COLLECTION_PATH, incidentData.id);
                await updateDoc(incidentRef, incidentData);
            } else {
                await addDoc(collection(db, INCIDENTS_COLLECTION_PATH), { ...incidentData, createdAt: serverTimestamp() });
            }
            navigateTo('list');
        } catch (e) {
            console.error("Error guardando el incidente: ", e);
            setError("Error al guardar el incidente.");
        }
    };
    
    const handleSaveSettings = async (newSettings) => {
        try {
            const settingsRef = doc(db, SETTINGS_DOC_PATH);
            await setDoc(settingsRef, newSettings, { merge: true });
        } catch (e) {
            console.error("Error guardando configuración:", e);
            setError("No se pudo guardar la configuración.");
        }
    };

    const navigateTo = (view, data = null) => {
        setCurrentView(view);
        setSelectedIncident(data);
    };

    const renderContent = () => {
        if (loading) return <Spinner />;
        if (error) return <div className="text-center text-red-500 p-4">{error}</div>;

        switch (currentView) {
            case 'form':
                return <IncidentForm incident={selectedIncident} onSave={handleSaveIncident} onCancel={() => navigateTo('list')} />;
            case 'detail':
                return <IncidentDetail incident={selectedIncident} onBack={() => navigateTo('list')} onEdit={(inc) => navigateTo('form', inc)} />;
            case 'dashboard':
                return <Dashboard incidents={incidents} settings={settings} onSaveSettings={handleSaveSettings} />;
            case 'list':
            default:
                return <IncidentList incidents={incidents} onNew={() => navigateTo('form')} onView={(inc) => navigateTo('detail', inc)} />;
        }
    };

    return (
        <div className="bg-gray-50 min-h-screen font-sans text-gray-800">
            <header className="bg-white shadow-md sticky top-0 z-20">
                <div className="container mx-auto px-4 sm:px-6 lg:px-8">
                    <div className="flex items-center justify-between h-20">
                        <div className="flex items-center space-x-3">
                            <AlertTriangle className="text-blue-600" size={32} />
                            <h1 className="text-xl sm:text-2xl font-bold text-gray-800">Plataforma de Seguridad de Procesos</h1>
                        </div>
                        <div className="text-xs text-gray-500 hidden md:block">
                            <p>Conforme a Resolución 1890 de 2025</p>
                            {user && <p>ID de App (para compartir): <span className="font-mono text-xs">{appId}</span></p>}
                        </div>
                    </div>
                </div>
            </header>
            <nav className="bg-blue-800 text-white shadow-lg">
                <div className="container mx-auto px-4 sm:px-6 lg:px-8 flex justify-center space-x-4 sm:space-x-8">
                    <button onClick={() => navigateTo('list')} className={`flex items-center py-3 px-4 font-semibold border-b-4 transition-colors ${currentView === 'list' || currentView === 'detail' || currentView === 'form' ? 'border-yellow-400' : 'border-transparent hover:bg-blue-700'}`}>
                        <List size={20} className="mr-2"/> Incidentes
                    </button>
                    <button onClick={() => navigateTo('dashboard')} className={`flex items-center py-3 px-4 font-semibold border-b-4 transition-colors ${currentView === 'dashboard' ? 'border-yellow-400' : 'border-transparent hover:bg-blue-700'}`}>
                        <LayoutDashboard size={20} className="mr-2"/> Dashboard
                    </button>
                </div>
            </nav>
            <main className="container mx-auto p-4 sm:p-6 lg:p-8">
                {renderContent()}
            </main>
        </div>
    );
};

// --- VISTA: Lista de Incidentes ---
const IncidentList = ({ incidents, onNew, onView }) => (
  <div className="animate-fade-in">
    <div className="flex justify-between items-center mb-6">
      <h2 className="text-2xl font-semibold flex items-center"><List className="mr-3 text-blue-500"/>Registros de Incidentes</h2>
      <button onClick={onNew} className="flex items-center bg-blue-600 text-white font-bold py-2 px-4 rounded-lg shadow-lg hover:bg-blue-700 transition-all duration-300 transform hover:scale-105">
        <PlusCircle size={20} className="mr-2" />
        Nuevo Incidente
      </button>
    </div>
    <div className="bg-white rounded-xl shadow-lg overflow-hidden">
      <div className="overflow-x-auto">
        {incidents.length > 0 ? (
          <table className="w-full text-sm text-left text-gray-600">
            <thead className="text-xs text-gray-700 uppercase bg-gray-100">
              <tr>
                <th scope="col" className="px-6 py-3">Fecha del Incidente</th>
                <th scope="col" className="px-6 py-3">Descripción</th>
                <th scope="col" className="px-6 py-3">Clasificación</th>
                <th scope="col" className="px-6 py-3 text-center">Acciones</th>
              </tr>
            </thead>
            <tbody>
              {incidents.map(incident => (
                <tr key={incident.id} className="bg-white border-b hover:bg-gray-50">
                  <td className="px-6 py-4 font-medium">{incident.incidentDate?.toDate().toLocaleDateString('es-CO')}</td>
                  <td className="px-6 py-4 max-w-sm truncate">{incident.description}</td>
                  <td className="px-6 py-4">
                    <span className={`px-3 py-1 rounded-full font-semibold text-xs ${getClassificationColor(incident.classification)}`}>
                      {incident.classification}
                    </span>
                  </td>
                  <td className="px-6 py-4 text-center">
                    <button onClick={() => onView(incident)} className="text-blue-600 hover:text-blue-800 font-medium p-2">
                      <Eye size={18} />
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        ) : (
          <div className="text-center p-10 text-gray-500">
            <p>No hay incidentes registrados.</p>
            <p>Haga clic en "Nuevo Incidente" para comenzar.</p>
          </div>
        )}
      </div>
    </div>
  </div>
);

// --- VISTA: Detalle del Incidente ---
const IncidentDetail = ({ incident, onBack, onEdit }) => (
    <div className="bg-white p-6 sm:p-8 rounded-xl shadow-lg animate-fade-in">
        <div className="flex justify-between items-start mb-6">
            <div>
                <h2 className="text-2xl sm:text-3xl font-bold text-gray-800">{incident.description}</h2>
                <p className="text-sm text-gray-500 mt-1">Incidente del {incident.incidentDate?.toDate().toLocaleDateString('es-CO', { year: 'numeric', month: 'long', day: 'numeric' })}</p>
            </div>
            <button onClick={onBack} className="flex items-center text-gray-500 hover:text-gray-800 transition">
                <ArrowLeft size={18} className="mr-1" /> Volver
            </button>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
            <div className="bg-gray-50 p-4 rounded-lg">
                <h3 className="font-semibold text-gray-700 flex items-center mb-2"><Building size={18} className="mr-2 text-blue-500"/>Información General</h3>
                <p><strong className="font-medium">Empresa:</strong> {incident.companyName}</p>
                <p><strong className="font-medium">Clasificado por:</strong> {incident.classifierName}</p>
                <p><strong className="font-medium">Fecha de registro:</strong> {incident.createdAt?.toDate().toLocaleString('es-CO')}</p>
            </div>
            <div className="bg-gray-50 p-4 rounded-lg">
                <h3 className="font-semibold text-gray-700 flex items-center mb-2"><Shield size={18} className="mr-2 text-blue-500"/>Resultado de Clasificación</h3>
                <p><strong className="font-medium">Clasificación:</strong> <span className={`px-3 py-1 rounded-full font-semibold text-sm ${getClassificationColor(incident.classification)}`}>{incident.classification}</span></p>
                <p><strong className="font-medium">¿Requiere Reporte?:</strong> <span className={`font-bold ${incident.reportRequired ? 'text-red-600' : 'text-green-600'}`}>{incident.reportRequired ? 'SÍ, REPORTAR A MINTRABAJO (< 24h)' : 'NO'}</span></p>
                <p className="mt-2 text-xs text-gray-600"><strong className="font-medium">Criterio Principal:</strong> {incident.justification}</p>
            </div>
        </div>

        <div>
            <h3 className="font-semibold text-gray-700 flex items-center mb-3"><FileText size={18} className="mr-2 text-blue-500"/>Detalles y Criterios Evaluados</h3>
            <div className="space-y-3 text-sm bg-gray-50 p-4 rounded-lg">
                {Object.entries(incident.answers).map(([key, value]) => (
                    <div key={key} className="flex justify-between">
                        <span className="text-gray-600">{getQuestionLabel(key)}:</span>
                        <span className="font-medium text-gray-800">{formatAnswer(value)}</span>
                    </div>
                ))}
            </div>
        </div>

        <div className="mt-8 flex justify-end space-x-4">
            <button onClick={() => onEdit(incident)} className="flex items-center bg-yellow-500 text-white font-bold py-2 px-4 rounded-lg shadow-lg hover:bg-yellow-600 transition-all">
                <Edit size={18} className="mr-2" /> Editar
            </button>
        </div>
    </div>
);

// --- FORMULARIO DE CLASIFICACIÓN ---
const IncidentForm = ({ incident, onSave, onCancel }) => {
  const [step, setStep] = useState(1);
  const [formData, setFormData] = useState({
    companyName: '',
    incidentDate: new Date().toISOString().split('T')[0],
    description: '',
    classifierName: '',
    deaths: 0,
    injuredOnsite: 0,
    injuredOffsite: 0,
    damagedHomes: 'no',
    evacuationPeople: 0,
    evacuationHours: 0,
    servicesDisruptionPeople: 0,
    servicesDisruptionHours: 0,
    envDamageProtected: 0,
    envDamageExtended: 0,
    envDamageRiver: 0,
    envDamageLake: 0,
    envDamageDelta: 0,
    envDamageAquifer: 0,
    damageCostOnsite: 0,
    damageCostOffsite: 0,
    transboundaryEffects: 'no',
    releaseO